package rbbi

import (
	"testing"
)

func testNext(t *testing.T, str string, offsets []int) {
	cursor := NewStringCursor(str)

	rbbi := NewCharacterRBBI()
	rbbi.SetCursor(cursor)

	for i := 0; i < len(offsets); i++ {
		pos, ok := rbbi.Next()

		if !ok {
			t.Error("Next reached end of string")
		}

		if pos != offsets[i] {
			t.Error("Invalid next break position")
		}
	}

	pos, ok := rbbi.Next()

	if ok {
		t.Error("Next was ok beyond end of string")
	}

	if pos != -1 {
		t.Error("Next did not have position -1 at end of string")
	}
}

func TestNextEmpty(t *testing.T) {
	testNext(t, "", []int{})
}

func TestNextAscii(t *testing.T) {
	testNext(t, "hello", []int{1, 2, 3, 4, 5})
}

func TestNextEmoji(t *testing.T) {
	testNext(t, "🐨🏴‍☠️❤️‍🔥🥕", []int{4, 17, 30, 34})
}

func TestNextZalgo(t *testing.T) {
	testNext(t, "h̷̝͈͉̎̇̋̓̄e̴̻̊̂̏̑̏l̸̢͚̬͇̗͂̿͠l̴̢̨̼͇̍̓͌͋o̷̫͋", []int{19, 34, 53, 72, 79})
}

func TestNextBrokenStart(t *testing.T) {
	// Zalgo test with first byte removed
	str := string([]byte{0xcc, 0xb7, 0xcc, 0x8e, 0xcc, 0x87, 0xcc, 0x8b, 0xcd, 0x83, 0xcc, 0x84, 0xcc, 0x9d, 0xcd, 0x88, 0xcd, 0x89, 0x65, 0xcc, 0xb4, 0xcc, 0x8a, 0xcc, 0x82, 0xcc, 0x8f, 0xcc, 0x91, 0xcc, 0x8f, 0xcc, 0xbb, 0x6c, 0xcc, 0xb8, 0xcd, 0xa0, 0xcd, 0x82, 0xcc, 0xbf, 0xcd, 0x9a, 0xcc, 0xac, 0xcc, 0xa2, 0xcd, 0x87, 0xcc, 0x97, 0x6c, 0xcc, 0xb4, 0xcc, 0x8d, 0xcc, 0x93, 0xcd, 0x8c, 0xcd, 0x8b, 0xcc, 0xbc, 0xcd, 0x87, 0xcc, 0xa2, 0xcc, 0xa8, 0x6f, 0xcc, 0xb7, 0xcd, 0x8b, 0xcc, 0xab})

	testNext(t, str, []int{18, 33, 52, 71, 78})
}

func TestNextBrokenEnd(t *testing.T) {
	// Zalgo test with last byte removed
	str := string([]byte{0x68, 0xcc, 0xb7, 0xcc, 0x8e, 0xcc, 0x87, 0xcc, 0x8b, 0xcd, 0x83, 0xcc, 0x84, 0xcc, 0x9d, 0xcd, 0x88, 0xcd, 0x89, 0x65, 0xcc, 0xb4, 0xcc, 0x8a, 0xcc, 0x82, 0xcc, 0x8f, 0xcc, 0x91, 0xcc, 0x8f, 0xcc, 0xbb, 0x6c, 0xcc, 0xb8, 0xcd, 0xa0, 0xcd, 0x82, 0xcc, 0xbf, 0xcd, 0x9a, 0xcc, 0xac, 0xcc, 0xa2, 0xcd, 0x87, 0xcc, 0x97, 0x6c, 0xcc, 0xb4, 0xcc, 0x8d, 0xcc, 0x93, 0xcd, 0x8c, 0xcd, 0x8b, 0xcc, 0xbc, 0xcd, 0x87, 0xcc, 0xa2, 0xcc, 0xa8, 0x6f, 0xcc, 0xb7, 0xcd, 0x8b, 0xcc})
	testNext(t, str, []int{19, 34, 53, 72, 77, 78})
}

func testPrevious(t *testing.T, str string, offsets []int) {
	cursor := NewStringCursor(str)
	cursor.SetPosition(len(str))

	rbbi := NewCharacterRBBI()
	rbbi.SetCursor(cursor)

	for i := len(offsets) - 1; i >= 0; i-- {
		pos, ok := rbbi.Previous()

		if !ok {
			t.Error("Previous reached end of string")
		}

		if pos != offsets[i] {
			t.Error("Invalid next break position")
		}
	}

	pos, ok := rbbi.Previous()

	if ok {
		t.Error("Previous was ok beyond end of string")
	}

	if pos != -1 {
		t.Error("Previous did not have position -1 at end of string")
	}
}

func TestPreviousEmpty(t *testing.T) {
	testPrevious(t, "", []int{})
}

func TestPreviousAscii(t *testing.T) {
	testPrevious(t, "hello", []int{0, 1, 2, 3, 4})
}

func TestPreviousEmoji(t *testing.T) {
	testPrevious(t, "🐨🏴‍☠️❤️‍🔥🥕", []int{0, 4, 17, 30})
}

func TestPreviousZalgo(t *testing.T) {
	testPrevious(t, "h̷̝͈͉̎̇̋̓̄e̴̻̊̂̏̑̏l̸̢͚̬͇̗͂̿͠l̴̢̨̼͇̍̓͌͋o̷̫͋", []int{0, 19, 34, 53, 72})
}

func TestPreviousBrokenStart(t *testing.T) {
	// Zalgo test with first byte removed
	str := string([]byte{0xcc, 0xb7, 0xcc, 0x8e, 0xcc, 0x87, 0xcc, 0x8b, 0xcd, 0x83, 0xcc, 0x84, 0xcc, 0x9d, 0xcd, 0x88, 0xcd, 0x89, 0x65, 0xcc, 0xb4, 0xcc, 0x8a, 0xcc, 0x82, 0xcc, 0x8f, 0xcc, 0x91, 0xcc, 0x8f, 0xcc, 0xbb, 0x6c, 0xcc, 0xb8, 0xcd, 0xa0, 0xcd, 0x82, 0xcc, 0xbf, 0xcd, 0x9a, 0xcc, 0xac, 0xcc, 0xa2, 0xcd, 0x87, 0xcc, 0x97, 0x6c, 0xcc, 0xb4, 0xcc, 0x8d, 0xcc, 0x93, 0xcd, 0x8c, 0xcd, 0x8b, 0xcc, 0xbc, 0xcd, 0x87, 0xcc, 0xa2, 0xcc, 0xa8, 0x6f, 0xcc, 0xb7, 0xcd, 0x8b, 0xcc, 0xab})

	testPrevious(t, str, []int{0, 18, 33, 52, 71})
}

func TestPreviousBrokenEnd(t *testing.T) {
	// Zalgo test with last byte removed
	str := string([]byte{0x68, 0xcc, 0xb7, 0xcc, 0x8e, 0xcc, 0x87, 0xcc, 0x8b, 0xcd, 0x83, 0xcc, 0x84, 0xcc, 0x9d, 0xcd, 0x88, 0xcd, 0x89, 0x65, 0xcc, 0xb4, 0xcc, 0x8a, 0xcc, 0x82, 0xcc, 0x8f, 0xcc, 0x91, 0xcc, 0x8f, 0xcc, 0xbb, 0x6c, 0xcc, 0xb8, 0xcd, 0xa0, 0xcd, 0x82, 0xcc, 0xbf, 0xcd, 0x9a, 0xcc, 0xac, 0xcc, 0xa2, 0xcd, 0x87, 0xcc, 0x97, 0x6c, 0xcc, 0xb4, 0xcc, 0x8d, 0xcc, 0x93, 0xcd, 0x8c, 0xcd, 0x8b, 0xcc, 0xbc, 0xcd, 0x87, 0xcc, 0xa2, 0xcc, 0xa8, 0x6f, 0xcc, 0xb7, 0xcd, 0x8b, 0xcc})
	testPrevious(t, str, []int{0, 19, 34, 53, 72, 77})
}
